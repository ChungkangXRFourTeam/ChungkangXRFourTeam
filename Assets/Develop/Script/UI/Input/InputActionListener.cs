//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Develop/Script/UI/Input/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionListener: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionListener()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""MainGame"",
            ""id"": ""fa99f9d7-1294-40a7-81c2-87d2889fffdb"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b271495b-2879-4d7b-a2c9-9b1a860e75e2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""a55795e7-a752-4ca5-a216-706a8ce4abb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""034eef75-82e8-4172-a56d-c25be76c8f94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""04b0308c-cf49-4cc1-afc9-1a98a9f519fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BoundMode"",
                    ""type"": ""Button"",
                    ""id"": ""c7e81bc4-deba-4b61-a746-0e6ede755413"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fall"",
                    ""type"": ""Button"",
                    ""id"": ""bb26fee0-8e96-48d5-b4a8-e6e4b542c690"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Swing"",
                    ""type"": ""Button"",
                    ""id"": ""f37f6d9d-e07f-4311-b90e-826b3dbc6738"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MountKennel"",
                    ""type"": ""Button"",
                    ""id"": ""7543c49f-8c88-4965-a977-eee149d85849"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""98d09c59-6704-4019-bbc6-7ea56f22d134"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""623952e7-688f-4bf9-9372-3bb397204dd9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d6a9d5dd-49b3-46af-81ef-158f8cdd49d5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""596418b8-571c-4a75-94f5-c79897898195"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b960912-56a8-4d6c-b9a4-9162eac5355c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ffc430f-227d-4062-a609-11acdae99e14"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0192136-9e0d-4838-bec3-fd9c948ffd8f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1b32849-3386-4e4d-a0ba-ec4a94f61e76"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BoundMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39549bba-883d-4e8c-a8e1-f46411a956a8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b40c7c11-c99b-4fb2-8942-82b004fb0f82"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e2c8dc8-cb19-432a-b8a2-93bd23e64eb3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MountKennel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TalkEvent"",
            ""id"": ""7709b953-2828-4452-91cb-8f807ff6a219"",
            ""actions"": [
                {
                    ""name"": ""NextText"",
                    ""type"": ""Button"",
                    ""id"": ""4debb507-b0b4-4512-a47b-92eafab7dac4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=1.401298E-45)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""50532f4c-d05e-45f9-8f0d-2bb0e977a30d"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextText"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a821e860-7327-4914-8653-af7cb359b914"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextText"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""e0ae08e3-f2fb-4993-a5a2-71143236b7c7"",
            ""actions"": [
                {
                    ""name"": ""Settings"",
                    ""type"": ""Button"",
                    ""id"": ""41b53341-871e-4c29-a149-b051b5becabe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""026db76b-0278-4adf-95e4-6cb304f9836d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Settings"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainGame
        m_MainGame = asset.FindActionMap("MainGame", throwIfNotFound: true);
        m_MainGame_Move = m_MainGame.FindAction("Move", throwIfNotFound: true);
        m_MainGame_Attack = m_MainGame.FindAction("Attack", throwIfNotFound: true);
        m_MainGame_Grab = m_MainGame.FindAction("Grab", throwIfNotFound: true);
        m_MainGame_Jump = m_MainGame.FindAction("Jump", throwIfNotFound: true);
        m_MainGame_BoundMode = m_MainGame.FindAction("BoundMode", throwIfNotFound: true);
        m_MainGame_Fall = m_MainGame.FindAction("Fall", throwIfNotFound: true);
        m_MainGame_Swing = m_MainGame.FindAction("Swing", throwIfNotFound: true);
        m_MainGame_MountKennel = m_MainGame.FindAction("MountKennel", throwIfNotFound: true);
        // TalkEvent
        m_TalkEvent = asset.FindActionMap("TalkEvent", throwIfNotFound: true);
        m_TalkEvent_NextText = m_TalkEvent.FindAction("NextText", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Settings = m_UI.FindAction("Settings", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainGame
    private readonly InputActionMap m_MainGame;
    private List<IMainGameActions> m_MainGameActionsCallbackInterfaces = new List<IMainGameActions>();
    private readonly InputAction m_MainGame_Move;
    private readonly InputAction m_MainGame_Attack;
    private readonly InputAction m_MainGame_Grab;
    private readonly InputAction m_MainGame_Jump;
    private readonly InputAction m_MainGame_BoundMode;
    private readonly InputAction m_MainGame_Fall;
    private readonly InputAction m_MainGame_Swing;
    private readonly InputAction m_MainGame_MountKennel;
    public struct MainGameActions
    {
        private @InputActionListener m_Wrapper;
        public MainGameActions(@InputActionListener wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MainGame_Move;
        public InputAction @Attack => m_Wrapper.m_MainGame_Attack;
        public InputAction @Grab => m_Wrapper.m_MainGame_Grab;
        public InputAction @Jump => m_Wrapper.m_MainGame_Jump;
        public InputAction @BoundMode => m_Wrapper.m_MainGame_BoundMode;
        public InputAction @Fall => m_Wrapper.m_MainGame_Fall;
        public InputAction @Swing => m_Wrapper.m_MainGame_Swing;
        public InputAction @MountKennel => m_Wrapper.m_MainGame_MountKennel;
        public InputActionMap Get() { return m_Wrapper.m_MainGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainGameActions set) { return set.Get(); }
        public void AddCallbacks(IMainGameActions instance)
        {
            if (instance == null || m_Wrapper.m_MainGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainGameActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @BoundMode.started += instance.OnBoundMode;
            @BoundMode.performed += instance.OnBoundMode;
            @BoundMode.canceled += instance.OnBoundMode;
            @Fall.started += instance.OnFall;
            @Fall.performed += instance.OnFall;
            @Fall.canceled += instance.OnFall;
            @Swing.started += instance.OnSwing;
            @Swing.performed += instance.OnSwing;
            @Swing.canceled += instance.OnSwing;
            @MountKennel.started += instance.OnMountKennel;
            @MountKennel.performed += instance.OnMountKennel;
            @MountKennel.canceled += instance.OnMountKennel;
        }

        private void UnregisterCallbacks(IMainGameActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @BoundMode.started -= instance.OnBoundMode;
            @BoundMode.performed -= instance.OnBoundMode;
            @BoundMode.canceled -= instance.OnBoundMode;
            @Fall.started -= instance.OnFall;
            @Fall.performed -= instance.OnFall;
            @Fall.canceled -= instance.OnFall;
            @Swing.started -= instance.OnSwing;
            @Swing.performed -= instance.OnSwing;
            @Swing.canceled -= instance.OnSwing;
            @MountKennel.started -= instance.OnMountKennel;
            @MountKennel.performed -= instance.OnMountKennel;
            @MountKennel.canceled -= instance.OnMountKennel;
        }

        public void RemoveCallbacks(IMainGameActions instance)
        {
            if (m_Wrapper.m_MainGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainGameActions instance)
        {
            foreach (var item in m_Wrapper.m_MainGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainGameActions @MainGame => new MainGameActions(this);

    // TalkEvent
    private readonly InputActionMap m_TalkEvent;
    private List<ITalkEventActions> m_TalkEventActionsCallbackInterfaces = new List<ITalkEventActions>();
    private readonly InputAction m_TalkEvent_NextText;
    public struct TalkEventActions
    {
        private @InputActionListener m_Wrapper;
        public TalkEventActions(@InputActionListener wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextText => m_Wrapper.m_TalkEvent_NextText;
        public InputActionMap Get() { return m_Wrapper.m_TalkEvent; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TalkEventActions set) { return set.Get(); }
        public void AddCallbacks(ITalkEventActions instance)
        {
            if (instance == null || m_Wrapper.m_TalkEventActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TalkEventActionsCallbackInterfaces.Add(instance);
            @NextText.started += instance.OnNextText;
            @NextText.performed += instance.OnNextText;
            @NextText.canceled += instance.OnNextText;
        }

        private void UnregisterCallbacks(ITalkEventActions instance)
        {
            @NextText.started -= instance.OnNextText;
            @NextText.performed -= instance.OnNextText;
            @NextText.canceled -= instance.OnNextText;
        }

        public void RemoveCallbacks(ITalkEventActions instance)
        {
            if (m_Wrapper.m_TalkEventActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITalkEventActions instance)
        {
            foreach (var item in m_Wrapper.m_TalkEventActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TalkEventActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TalkEventActions @TalkEvent => new TalkEventActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Settings;
    public struct UIActions
    {
        private @InputActionListener m_Wrapper;
        public UIActions(@InputActionListener wrapper) { m_Wrapper = wrapper; }
        public InputAction @Settings => m_Wrapper.m_UI_Settings;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Settings.started += instance.OnSettings;
            @Settings.performed += instance.OnSettings;
            @Settings.canceled += instance.OnSettings;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Settings.started -= instance.OnSettings;
            @Settings.performed -= instance.OnSettings;
            @Settings.canceled -= instance.OnSettings;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IMainGameActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnGrab(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnBoundMode(InputAction.CallbackContext context);
        void OnFall(InputAction.CallbackContext context);
        void OnSwing(InputAction.CallbackContext context);
        void OnMountKennel(InputAction.CallbackContext context);
    }
    public interface ITalkEventActions
    {
        void OnNextText(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnSettings(InputAction.CallbackContext context);
    }
}
